// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: readpb/read.proto

package readpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	All bool  `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_readpb_read_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_readpb_read_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_readpb_read_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetUserRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type GetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string  `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Gender   string  `protobuf:"bytes,2,opt,name=Gender,proto3" json:"Gender,omitempty"`
	Birthday string  `protobuf:"bytes,3,opt,name=Birthday,proto3" json:"Birthday,omitempty"`
	Avatar   string  `protobuf:"bytes,4,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Card     []*Card `protobuf:"bytes,5,rep,name=card,proto3" json:"card,omitempty"`
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_readpb_read_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_readpb_read_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_readpb_read_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetUserResponse) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *GetUserResponse) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *GetUserResponse) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *GetUserResponse) GetCard() []*Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type GetCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCardRequest) Reset() {
	*x = GetCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_readpb_read_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardRequest) ProtoMessage() {}

func (x *GetCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_readpb_read_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardRequest.ProtoReflect.Descriptor instead.
func (*GetCardRequest) Descriptor() ([]byte, []int) {
	return file_readpb_read_proto_rawDescGZIP(), []int{2}
}

func (x *GetCardRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card []*Card `protobuf:"bytes,1,rep,name=card,proto3" json:"card,omitempty"`
}

func (x *GetCardResponse) Reset() {
	*x = GetCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_readpb_read_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardResponse) ProtoMessage() {}

func (x *GetCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_readpb_read_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardResponse.ProtoReflect.Descriptor instead.
func (*GetCardResponse) Descriptor() ([]byte, []int) {
	return file_readpb_read_proto_rawDescGZIP(), []int{3}
}

func (x *GetCardResponse) GetCard() []*Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankName string `protobuf:"bytes,1,opt,name=BankName,proto3" json:"BankName,omitempty"`
	Serial   string `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_readpb_read_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_readpb_read_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_readpb_read_proto_rawDescGZIP(), []int{4}
}

func (x *Card) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *Card) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

var File_readpb_read_proto protoreflect.FileDescriptor

var file_readpb_read_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x65, 0x61, 0x64, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x72, 0x65, 0x61, 0x64, 0x22, 0x32, 0x0a, 0x0e, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x22, 0x91, 0x01,
	0x0a, 0x0f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x22, 0x20, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x3a, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x32, 0x83, 0x01, 0x0a, 0x0b, 0x63, 0x72, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x2e,
	0x72, 0x65, 0x61, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x38,
	0x0a, 0x07, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x2e, 0x72, 0x65, 0x61, 0x64,
	0x2e, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x72, 0x65, 0x61, 0x64,
	0x70, 0x62, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_readpb_read_proto_rawDescOnce sync.Once
	file_readpb_read_proto_rawDescData = file_readpb_read_proto_rawDesc
)

func file_readpb_read_proto_rawDescGZIP() []byte {
	file_readpb_read_proto_rawDescOnce.Do(func() {
		file_readpb_read_proto_rawDescData = protoimpl.X.CompressGZIP(file_readpb_read_proto_rawDescData)
	})
	return file_readpb_read_proto_rawDescData
}

var file_readpb_read_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_readpb_read_proto_goTypes = []interface{}{
	(*GetUserRequest)(nil),  // 0: read.getUserRequest
	(*GetUserResponse)(nil), // 1: read.getUserResponse
	(*GetCardRequest)(nil),  // 2: read.getCardRequest
	(*GetCardResponse)(nil), // 3: read.getCardResponse
	(*Card)(nil),            // 4: read.Card
}
var file_readpb_read_proto_depIdxs = []int32{
	4, // 0: read.getUserResponse.card:type_name -> read.Card
	4, // 1: read.getCardResponse.card:type_name -> read.Card
	0, // 2: read.crudService.getUser:input_type -> read.getUserRequest
	2, // 3: read.crudService.getCard:input_type -> read.getCardRequest
	1, // 4: read.crudService.getUser:output_type -> read.getUserResponse
	3, // 5: read.crudService.getCard:output_type -> read.getCardResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_readpb_read_proto_init() }
func file_readpb_read_proto_init() {
	if File_readpb_read_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_readpb_read_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_readpb_read_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_readpb_read_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_readpb_read_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_readpb_read_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_readpb_read_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_readpb_read_proto_goTypes,
		DependencyIndexes: file_readpb_read_proto_depIdxs,
		MessageInfos:      file_readpb_read_proto_msgTypes,
	}.Build()
	File_readpb_read_proto = out.File
	file_readpb_read_proto_rawDesc = nil
	file_readpb_read_proto_goTypes = nil
	file_readpb_read_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CrudServiceClient is the client API for CrudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrudServiceClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (CrudService_GetUserClient, error)
	GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*GetCardResponse, error)
}

type crudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudServiceClient(cc grpc.ClientConnInterface) CrudServiceClient {
	return &crudServiceClient{cc}
}

func (c *crudServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (CrudService_GetUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudService_serviceDesc.Streams[0], "/read.crudService/getUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudServiceGetUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudService_GetUserClient interface {
	Recv() (*GetUserResponse, error)
	grpc.ClientStream
}

type crudServiceGetUserClient struct {
	grpc.ClientStream
}

func (x *crudServiceGetUserClient) Recv() (*GetUserResponse, error) {
	m := new(GetUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudServiceClient) GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*GetCardResponse, error) {
	out := new(GetCardResponse)
	err := c.cc.Invoke(ctx, "/read.crudService/getCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrudServiceServer is the server API for CrudService service.
type CrudServiceServer interface {
	GetUser(*GetUserRequest, CrudService_GetUserServer) error
	GetCard(context.Context, *GetCardRequest) (*GetCardResponse, error)
}

// UnimplementedCrudServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCrudServiceServer struct {
}

func (*UnimplementedCrudServiceServer) GetUser(*GetUserRequest, CrudService_GetUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedCrudServiceServer) GetCard(context.Context, *GetCardRequest) (*GetCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}

func RegisterCrudServiceServer(s *grpc.Server, srv CrudServiceServer) {
	s.RegisterService(&_CrudService_serviceDesc, srv)
}

func _CrudService_GetUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudServiceServer).GetUser(m, &crudServiceGetUserServer{stream})
}

type CrudService_GetUserServer interface {
	Send(*GetUserResponse) error
	grpc.ServerStream
}

type crudServiceGetUserServer struct {
	grpc.ServerStream
}

func (x *crudServiceGetUserServer) Send(m *GetUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudService_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/read.crudService/GetCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).GetCard(ctx, req.(*GetCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CrudService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "read.crudService",
	HandlerType: (*CrudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCard",
			Handler:    _CrudService_GetCard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getUser",
			Handler:       _CrudService_GetUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "readpb/read.proto",
}
